Model: <class 'src.models.pytorch.mpc.mppi.MPPIAgent'>, Env: CartPole-v0, Date: 02/06/2020 21:32:51
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-53-generic-x86_64-with-debian-buster-sid
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/ModelPredictivePathIntegralWithDeepRL.git
Hash: 532fc5e111fb1692f97e381076ee4bff101dcca7
Branch: master

config: 
   TRIAL_AT = 1000
   SAVE_AT = 1
   SEED = 0
   REG_LAMBDA = 1e-06
   LEARN_RATE = 0.0001
   DISCOUNT_RATE = 0.99
   ADVANTAGE_DECAY = 0.95
   INPUT_LAYER = 512
   ACTOR_HIDDEN = 256
   CRITIC_HIDDEN = 1024
   EPS_MAX = 1.0
   EPS_MIN = 0.1
   EPS_DECAY = 0.998
   NUM_STEPS = 20
   MAX_BUFFER_SIZE = 100000
   REPLAY_BATCH_SIZE = 1000
   TARGET_UPDATE_RATE = 0.0004
   BATCH_SIZE = 100
   DYN_EPOCHS = 10
   ENV_MODEL = dfrntl
   MPC = 
      NSAMPLES = 100
      HORIZON = 20
      LAMBDA = 0.5
      CONTROL_FREQ = 1
   dynamics_size = 4
   state_size = (4,)
   action_size = [2]
   env_name = CartPole-v0
   rank = 0
   size = 1
   split = 1
   model = mppi
   framework = pt
   train_prop = 1.0
   tcp_ports = []
   tcp_rank = 0
   num_envs = 4
   nsteps = 100000
   render = True
   trial = False
   icm = False
   rs = False
   DYN = 
      REG_LAMBDA = 1e-06
      FACTOR = 0.5
      PATIENCE = 5
      LEARN_RATE = 0.001
      TRANSITION_HIDDEN = 256
      REWARD_HIDDEN = 256
      BETA_DYN = 0.1
      BETA_DOT = 1
      BETA_DDOT = 1,
num_envs: 0,
envs: <src.utils.envs.EnsembleEnv object at 0x7f8f27e93a90> 
	num_envs = 4
	env = <GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>> 
		env = <TimeLimit<CartPoleEnv<CartPole-v0>>> 
			env = <CartPoleEnv<CartPole-v0>> 
				gravity = 9.8
				masscart = 1.0
				masspole = 0.1
				total_mass = 1.1
				length = 0.5
				polemass_length = 0.05
				force_mag = 10.0
				tau = 0.02
				kinematics_integrator = euler
				theta_threshold_radians = 0.20943951023931953
				x_threshold = 2.4
				action_space = Discrete(2) 
					n = 2
					shape = ()
					dtype = int64
					np_random = RandomState(MT19937)
				observation_space = Box(4,) 
					dtype = float32
					shape = (4,)
					low = [-4.800e+00 -3.403e+38 -4.189e-01 -3.403e+38]
					high = [ 4.800e+00  3.403e+38  4.189e-01  3.403e+38]
					bounded_below = [ True  True  True  True]
					bounded_above = [ True  True  True  True]
					np_random = RandomState(MT19937)
				np_random = RandomState(MT19937)
				viewer = None
				state = None
				steps_beyond_done = None
				spec = EnvSpec(CartPole-v0) 
					id = CartPole-v0
					entry_point = gym.envs.classic_control:CartPoleEnv
					reward_threshold = 195.0
					nondeterministic = False
					max_episode_steps = 200
				verbose = 0
			action_space = Discrete(2) 
				n = 2
				shape = ()
				dtype = int64
				np_random = RandomState(MT19937)
			observation_space = Box(4,) 
				dtype = float32
				shape = (4,)
				low = [-4.800e+00 -3.403e+38 -4.189e-01 -3.403e+38]
				high = [ 4.800e+00  3.403e+38  4.189e-01  3.403e+38]
				bounded_below = [ True  True  True  True]
				bounded_above = [ True  True  True  True]
				np_random = RandomState(MT19937)
			reward_range = (-inf, inf)
			metadata = {'render.modes': ['human', 'rgb_array'], 'video.frames_per_second': 50}
		action_space = Discrete(2) 
			n = 2
			shape = ()
			dtype = int64
			np_random = RandomState(MT19937)
		observation_space = Box(4,) 
			dtype = float32
			shape = (4,)
			low = [-4.800e+00 -3.403e+38 -4.189e-01 -3.403e+38]
			high = [ 4.800e+00  3.403e+38  4.189e-01  3.403e+38]
			bounded_below = [ True  True  True  True]
			bounded_above = [ True  True  True  True]
			np_random = RandomState(MT19937)
		reward_range = (-inf, inf)
		metadata = {'render.modes': ['human', 'rgb_array'], 'video.frames_per_second': 50}
		preprocess = <src.envs.wrappers.RawPreprocess object at 0x7f8f222a8e90> 
			observation_space = Box(4,) 
				dtype = float32
				shape = (4,)
				low = [-4.800e+00 -3.403e+38 -4.189e-01 -3.403e+38]
				high = [ 4.800e+00  3.403e+38  4.189e-01  3.403e+38]
				bounded_below = [ True  True  True  True]
				bounded_above = [ True  True  True  True]
				np_random = RandomState(MT19937)
	envs = [<GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>>, <GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>>, <GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>>, <GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>>]
	test_envs = [<GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>>, <GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>>, <GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>>, <GymEnv<TimeLimit<CartPoleEnv<CartPole-v0>>>>]
	state_size = (4,)
	action_size = [2]
	action_space = Discrete(2) 
		n = 2
		shape = ()
		dtype = int64
		np_random = RandomState(MT19937)
	max_steps = 200,
agent: <src.models.wrappers.ParallelAgent object at 0x7f8f27e93090> 
	icm = None
	stack = <src.models.wrappers.RawState object at 0x7f8f22284bd0> 
		state_size = (4,)
	agent = <src.models.pytorch.mpc.mppi.MPPIAgent object at 0x7f8f27d35490> 
		noise_process = <src.utils.rand.BrownianNoise object at 0x7f8f22284c10> 
			size = [2]
			dt = 0.2
			action = [ 0.483  0.956]
			daction_dt = [ 1.441 -0.702]
		discrete = True
		action_size = [2]
		state_size = (4,)
		config = <src.utils.config.Config object at 0x7f8f2e5195d0> 
			TRIAL_AT = 1000
			SAVE_AT = 1
			SEED = 0
			REG_LAMBDA = 1e-06
			LEARN_RATE = 0.0001
			DISCOUNT_RATE = 0.99
			ADVANTAGE_DECAY = 0.95
			INPUT_LAYER = 512
			ACTOR_HIDDEN = 256
			CRITIC_HIDDEN = 1024
			EPS_MAX = 1.0
			EPS_MIN = 0.1
			EPS_DECAY = 0.998
			NUM_STEPS = 20
			MAX_BUFFER_SIZE = 100000
			REPLAY_BATCH_SIZE = 1000
			TARGET_UPDATE_RATE = 0.0004
			BATCH_SIZE = 100
			DYN_EPOCHS = 10
			ENV_MODEL = dfrntl
			MPC = <src.utils.config.Config object at 0x7f8eb7539450> 
				NSAMPLES = 100
				HORIZON = 20
				LAMBDA = 0.5
				CONTROL_FREQ = 1
			dynamics_size = 4
			state_size = (4,)
			action_size = [2]
			env_name = CartPole-v0
			rank = 0
			size = 1
			split = 1
			model = mppi
			framework = pt
			train_prop = 1.0
			tcp_ports = []
			tcp_rank = 0
			num_envs = 4
			nsteps = 100000
			render = True
			trial = False
			icm = False
			rs = False
			DYN = <src.utils.config.Config object at 0x7f8f2e5082d0> 
				REG_LAMBDA = 1e-06
				FACTOR = 0.5
				PATIENCE = 5
				LEARN_RATE = 0.001
				TRANSITION_HIDDEN = 256
				REWARD_HIDDEN = 256
				BETA_DYN = 0.1
				BETA_DOT = 1
				BETA_DDOT = 1
		stats = <src.utils.logger.Stats object at 0x7f8f22284c50> 
			mean_dict = {}
			sum_dict = {}
		eps = 1.0
		network = MPPIController() 
			training = True
			tau = 0.0004
			name = mppi
			stats = <src.utils.logger.Stats object at 0x7f8f22284cd0> 
				mean_dict = {}
				sum_dict = {}
			config = <src.utils.config.Config object at 0x7f8f2e5195d0> 
				TRIAL_AT = 1000
				SAVE_AT = 1
				SEED = 0
				REG_LAMBDA = 1e-06
				LEARN_RATE = 0.0001
				DISCOUNT_RATE = 0.99
				ADVANTAGE_DECAY = 0.95
				INPUT_LAYER = 512
				ACTOR_HIDDEN = 256
				CRITIC_HIDDEN = 1024
				EPS_MAX = 1.0
				EPS_MIN = 0.1
				EPS_DECAY = 0.998
				NUM_STEPS = 20
				MAX_BUFFER_SIZE = 100000
				REPLAY_BATCH_SIZE = 1000
				TARGET_UPDATE_RATE = 0.0004
				BATCH_SIZE = 100
				DYN_EPOCHS = 10
				ENV_MODEL = dfrntl
				MPC = <src.utils.config.Config object at 0x7f8eb7539450> 
					NSAMPLES = 100
					HORIZON = 20
					LAMBDA = 0.5
					CONTROL_FREQ = 1
				dynamics_size = 4
				state_size = (4,)
				action_size = [2]
				env_name = CartPole-v0
				rank = 0
				size = 1
				split = 1
				model = mppi
				framework = pt
				train_prop = 1.0
				tcp_ports = []
				tcp_rank = 0
				num_envs = 4
				nsteps = 100000
				render = True
				trial = False
				icm = False
				rs = False
				DYN = <src.utils.config.Config object at 0x7f8f2e5082d0> 
					REG_LAMBDA = 1e-06
					FACTOR = 0.5
					PATIENCE = 5
					LEARN_RATE = 0.001
					TRANSITION_HIDDEN = 256
					REWARD_HIDDEN = 256
					BETA_DYN = 0.1
					BETA_DOT = 1
					BETA_DDOT = 1
			device = cuda
			envmodel = <src.models.pytorch.mpc.EnvModel object at 0x7f8f22284d10> 
				network = DifferentialEnv(
					  (reward): RewardModel(
					    (linear1): Linear(in_features=10, out_features=256, bias=True)
					    (linear2): Linear(in_features=256, out_features=256, bias=True)
					    (linear3): Linear(in_features=256, out_features=1, bias=True)
					  )
					  (dynamics): TransitionModel(
					    (gru): GRUCell(10, 256)
					    (linear1): Linear(in_features=256, out_features=256, bias=True)
					    (linear2): Linear(in_features=256, out_features=256, bias=True)
					    (state_ddot): Linear(in_features=256, out_features=4, bias=True)
					  )
					) 
					training = True
					tau = 0.0004
					name = dfrntl
					stats = <src.utils.logger.Stats object at 0x7f8f22284d90> 
						mean_dict = {}
						sum_dict = {}
					config = <src.utils.config.Config object at 0x7f8f2e5195d0> 
						TRIAL_AT = 1000
						SAVE_AT = 1
						SEED = 0
						REG_LAMBDA = 1e-06
						LEARN_RATE = 0.0001
						DISCOUNT_RATE = 0.99
						ADVANTAGE_DECAY = 0.95
						INPUT_LAYER = 512
						ACTOR_HIDDEN = 256
						CRITIC_HIDDEN = 1024
						EPS_MAX = 1.0
						EPS_MIN = 0.1
						EPS_DECAY = 0.998
						NUM_STEPS = 20
						MAX_BUFFER_SIZE = 100000
						REPLAY_BATCH_SIZE = 1000
						TARGET_UPDATE_RATE = 0.0004
						BATCH_SIZE = 100
						DYN_EPOCHS = 10
						ENV_MODEL = dfrntl
						MPC = <src.utils.config.Config object at 0x7f8eb7539450> 
							NSAMPLES = 100
							HORIZON = 20
							LAMBDA = 0.5
							CONTROL_FREQ = 1
						dynamics_size = 4
						state_size = (4,)
						action_size = [2]
						env_name = CartPole-v0
						rank = 0
						size = 1
						split = 1
						model = mppi
						framework = pt
						train_prop = 1.0
						tcp_ports = []
						tcp_rank = 0
						num_envs = 4
						nsteps = 100000
						render = True
						trial = False
						icm = False
						rs = False
						DYN = <src.utils.config.Config object at 0x7f8f2e5082d0> 
							REG_LAMBDA = 1e-06
							FACTOR = 0.5
							PATIENCE = 5
							LEARN_RATE = 0.001
							TRANSITION_HIDDEN = 256
							REWARD_HIDDEN = 256
							BETA_DYN = 0.1
							BETA_DOT = 1
							BETA_DDOT = 1
					device = cuda
					state_size = (4,)
					action_size = [2]
					discrete = True
					dyn_index = 4
					optimizer = Adam (
					Parameter Group 0
					    amsgrad: False
					    betas: (0.9, 0.999)
					    eps: 1e-08
					    lr: 0.001
					    weight_decay: 1e-06
					)
					scheduler = <torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f8f22296310>
				state_size = (4,)
				action_size = [2]
			mu = [ 0.000  0.000]
			cov = [[ 0.500  0.000]
			 [ 0.000  0.500]]
			icov = [[ 2.000  0.000]
			 [ 0.000  2.000]]
			lamda = 0.5
			horizon = 20
			nsamples = 100
			action_size = [2]
			control = [[[-0.472  0.501]
			  [ 0.525 -0.893]
			  [ 0.831 -0.602]
			  [ 0.619 -0.564]
			  [ 0.243  0.927]
			  [-0.786 -0.488]
			  [ 0.488  0.737]
			  [ 0.399 -0.303]
			  [-0.810 -0.853]
			  [-0.396  0.641]
			  [-0.602 -0.407]
			  [ 0.774  0.793]
			  [-0.040  0.367]
			  [-0.293  0.985]
			  [ 0.149  0.113]
			  [ 0.399  0.700]
			  [-0.892 -0.839]
			  [ 0.378 -0.555]
			  [-0.412  0.067]
			  [ 0.173  0.057]]]
			noise = [[[[ 1.478  0.205]
			   [ 0.465 -0.897]
			   [-0.409  1.307]
			   ...
			   [-0.240 -0.513]
			   [-0.346  0.118]
			   [-0.951  0.282]]
			
			  [[-0.346 -0.177]
			   [-0.740 -1.202]
			   [-0.132  0.733]
			   ...
			   [ 0.610  0.190]
			   [-1.074 -0.174]
			   [ 0.021  0.504]]
			
			  [[ 0.631 -0.028]
			   [-0.896 -0.146]
			   [-0.638  0.878]
			   ...
			   [-0.690 -1.498]
			   [ 1.547  0.103]
			   [ 0.425  0.778]]
			
			  ...
			
			  [[ 0.295  0.315]
			   [ 0.683  0.547]
			   [-1.805  0.204]
			   ...
			   [ 0.230 -1.113]
			   [-0.272  0.567]
			   [ 0.130  2.001]]
			
			  [[ 0.063 -0.242]
			   [-0.539  0.237]
			   [-0.931  0.371]
			   ...
			   [ 0.652  0.674]
			   [-0.613 -0.231]
			   [ 1.330 -0.238]]
			
			  [[ 0.119  1.171]
			   [-0.252 -0.101]
			   [ 0.612 -1.480]
			   ...
			   [ 0.221  0.154]
			   [-0.644  0.824]
			   [-0.167 -1.464]]]]
			init_cost = [[ -7.716   4.060  -6.063   0.136   0.872  -0.497  -1.413  -6.892  -4.277  10.559   8.404   1.852   8.995  -1.329   1.430   0.985   7.397  -4.052  -5.544   4.612  15.737   5.233  -0.900  -8.353   4.843   5.667  12.499  -4.360  -3.334   7.112   6.800  -3.104  -4.509   1.256  -3.532   2.608   6.546  -2.226   1.906   0.221  -5.243  -3.019  -7.718   4.974   4.886  -5.529  -3.025   1.012  -1.237   1.779  -4.147   2.456  -7.343   2.382  -7.004  -3.110  -3.419  -3.895  -0.412  -4.559   6.678  -0.329   2.756   2.987   1.079   2.242  -7.531   0.679  -3.021  -0.807  -1.939   5.743  -0.928  -4.444  -2.055   2.237   3.824  -2.134  11.221  -7.163   6.124   5.832  -9.963  -9.782  -5.496  -1.297  -4.843 -10.027  -2.814  -3.335 -11.768  -1.789   7.255   4.913  -0.041   6.778   3.552   1.170   0.386  -1.005]]
		replay_buffer = <src.utils.rand.ReplayBuffer object at 0x7f8f27d77c90> 
			buffer = deque([], maxlen=100000)
		buffer = []
	noise_process = <src.utils.rand.BrownianNoise object at 0x7f8f22296390> 
		size = [2]
		dt = 0.2
		action = [-1.000 -0.115]
		daction_dt = [-0.367  0.238]
	discrete = True
	action_size = [2]
	state_size = (4,)
	config = <src.utils.config.Config object at 0x7f8f2e5195d0> 
		TRIAL_AT = 1000
		SAVE_AT = 1
		SEED = 0
		REG_LAMBDA = 1e-06
		LEARN_RATE = 0.0001
		DISCOUNT_RATE = 0.99
		ADVANTAGE_DECAY = 0.95
		INPUT_LAYER = 512
		ACTOR_HIDDEN = 256
		CRITIC_HIDDEN = 1024
		EPS_MAX = 1.0
		EPS_MIN = 0.1
		EPS_DECAY = 0.998
		NUM_STEPS = 20
		MAX_BUFFER_SIZE = 100000
		REPLAY_BATCH_SIZE = 1000
		TARGET_UPDATE_RATE = 0.0004
		BATCH_SIZE = 100
		DYN_EPOCHS = 10
		ENV_MODEL = dfrntl
		MPC = <src.utils.config.Config object at 0x7f8eb7539450> 
			NSAMPLES = 100
			HORIZON = 20
			LAMBDA = 0.5
			CONTROL_FREQ = 1
		dynamics_size = 4
		state_size = (4,)
		action_size = [2]
		env_name = CartPole-v0
		rank = 0
		size = 1
		split = 1
		model = mppi
		framework = pt
		train_prop = 1.0
		tcp_ports = []
		tcp_rank = 0
		num_envs = 4
		nsteps = 100000
		render = True
		trial = False
		icm = False
		rs = False
		DYN = <src.utils.config.Config object at 0x7f8f2e5082d0> 
			REG_LAMBDA = 1e-06
			FACTOR = 0.5
			PATIENCE = 5
			LEARN_RATE = 0.001
			TRANSITION_HIDDEN = 256
			REWARD_HIDDEN = 256
			BETA_DYN = 0.1
			BETA_DOT = 1
			BETA_DDOT = 1
	stats = <src.utils.logger.Stats object at 0x7f8f22296bd0> 
		mean_dict = {}
		sum_dict = {},
conn: None,

import tqdm
import torch
import random
import numpy as np
import scipy as sp
from scipy.stats import multivariate_normal
from src.utils.rand import RandomAgent, ReplayBuffer
from ..agents.base import PTNetwork, PTAgent, Conv, one_hot_from_indices
from . import EnvModel

class MPPIController(PTNetwork):
	def __init__(self, state_size, action_size, config, load="", gpu=True, name="mppi"):
		super().__init__(config, gpu=gpu, name=name)
		self.envmodel = EnvModel(state_size, action_size, config, load=load, gpu=gpu)
		self.mu = np.zeros(action_size)
		self.cov = np.diag(np.ones(action_size))*0.5
		self.icov = np.linalg.inv(self.cov)
		self.lamda = config.MPC.LAMBDA
		self.horizon = config.MPC.HORIZON
		self.nsamples = config.MPC.NSAMPLES
		self.config = config
		self.action_size = action_size
		self.init_control()

	def get_action(self, state, eps=None, sample=True):
		batch = state.shape[:-1]
		if len(batch) and self.control.shape[0] != batch[0]: self.init_control(batch[0])
		x = torch.Tensor(state).view(*batch, 1,-1).repeat_interleave(self.nsamples, -2)
		controls = np.clip(self.control[:,None,:,:] + self.noise, -1, 1)
		# self.envmodel.reset(batch_size=(*batch, self.nsamples), state=x)
		# self.states, rewards = zip(*[self.envmodel.step(controls[:,t], numpy=True) for t in range(self.horizon)])
		self.states, rewards = self.envmodel.rollout(controls, x, numpy=True)
		costs = -np.sum(rewards, -1) #+ self.lamda * np.copy(self.init_cost)
		beta = np.min(costs, -1, keepdims=True)
		costs_norm = -(costs - beta)/self.lamda
		weights = sp.special.softmax(costs_norm)
		self.control += np.sum(weights[:,:,None,None]*self.noise, len(batch))
		action = self.control[...,0,:]
		self.control = np.roll(self.control, -1, axis=-2)
		self.control[...,-1,:] = 0
		return action

	def init_control(self, batch_size=1):
		self.control = np.random.uniform(-1, 1, size=[batch_size, self.horizon, *self.action_size])
		self.noise = np.random.multivariate_normal(self.mu, self.cov, size=[batch_size, self.nsamples, self.horizon])
		self.init_cost = np.sum(self.control[:,None,:,None,:] @ self.icov[None,None,None,:,:] @ self.noise[:,:,:,:,None], axis=(2,3,4))

	def optimize(self, states, actions, next_states, rewards, dones):
		return self.envmodel.optimize(states, actions, next_states, rewards, dones)

	def save_model(self, dirname="pytorch", name="checkpoint", net=None):
		return self.envmodel.save_model(dirname, name, net)
		
	def load_model(self, dirname="pytorch", name="checkpoint", net=None):
		return self.envmodel.load_model(dirname, name, net)

	def get_stats(self):
		return {**super().get_stats(), **self.envmodel.get_stats()}

class MPPIAgent(PTAgent):
	def __init__(self, state_size, action_size, config, gpu=True, load=None):
		super().__init__(state_size, action_size, config, MPPIController, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		if random.random() < eps: return super().get_action(state)
		action = self.network.get_action(np.array(state))
		return np.clip(action, -1, 1)

	def partition(self, x):
		num_splits = x.shape[0]//self.config.NUM_STEPS
		if num_splits == 0:
			arr = np.zeros([self.config.NUM_STEPS, *x.shape[1:]])
			arr[-x.shape[0]:] = x
			x = arr
			num_splits = 1
		arr = x[-num_splits*self.config.NUM_STEPS:].reshape(num_splits, self.config.NUM_STEPS, *x.shape[1:])
		return arr

	def train(self, state, action, next_state, reward, done):
		if not hasattr(self, "buffers"): self.buffers = [[] for _ in done]
		for buffer, s, a, ns, r, d in zip(self.buffers, state, action, next_state, reward, done):
			buffer.append((s, a, ns, r, d))
			if not d: continue
		# self.buffer.append((state, action, next_state, reward, done))
		# if len(self.buffer) >= self.config.NUM_STEPS:
			states, actions, next_states, rewards, dones = map(np.array, zip(*buffer))
			states, actions, next_states, rewards, dones = [self.partition(x) for x in (states, actions, next_states, rewards, dones)]
			# mask_idx = np.argmax(dones,0) + (1-np.max(dones,0))*dones.shape[0]
			# mask = np.arange(dones.shape[0])[:,None] > mask_idx[None,:]
			# states_mask = mask[...,None].repeat(states.shape[-1],-1) 
			# actions_mask = mask[...,None].repeat(actions.shape[-1],-1) 
			# states[states_mask] = 0
			# actions[actions_mask] = 0
			# next_states[states_mask] = 0
			# rewards[mask] = 0
			# dones[mask] = 0
			self.replay_buffer.extend(list(zip(states, actions, next_states, rewards, dones)), shuffle=False)
			buffer.clear()
		if len(self.replay_buffer) > self.config.REPLAY_BATCH_SIZE:
			for _ in tqdm.tqdm(range(self.config.DYN_EPOCHS*len(self.replay_buffer)//self.config.BATCH_SIZE)):
				transform = lambda x: self.to_tensor(x).transpose(0,1)
				states, actions, next_states, rewards, dones = self.replay_buffer.next_batch(self.config.BATCH_SIZE, dtype=transform)[0]
				self.network.optimize(states, actions, next_states, rewards, dones)
			self.eps = max(self.eps * self.config.EPS_DECAY, self.config.EPS_MIN)
			self.replay_buffer.clear()


Step:       0, Reward:    13.750 [   4.323], Avg:    13.750 (1.000) <0-00:00:00> ({'r_t':     1.0000, 'eps':     1.0000, 'lr':     0.0010, 'eps_e':     1.0000, 'lr_e':     0.0010})
Step:    1000, Reward:    13.250 [   3.832], Avg:    13.500 (1.000) <0-00:00:00> ({'r_t':  1000.0000, 'eps':     1.0000, 'lr':     0.0010, 'eps_e':     1.0000, 'lr_e':     0.0010})
Step:    2000, Reward:     8.750 [   0.433], Avg:    11.917 (1.000) <0-00:00:00> ({'r_t':  1000.0000, 'eps':     1.0000, 'lr':     0.0010, 'eps_e':     1.0000, 'lr_e':     0.0010})
Step:    3000, Reward:    20.250 [   9.653], Avg:    14.000 (1.000) <0-00:00:01> ({'r_t':  1000.0000, 'eps':     1.0000, 'lr':     0.0010, 'eps_e':     1.0000, 'lr_e':     0.0010})
Step:    4000, Reward:    11.500 [   2.693], Avg:    13.500 (0.998) <0-00:00:14> ({'r_t':  1000.0000, 'eps':     0.9980, 'dyn_loss': 1218664.3750, 'dot_loss':  1545.7954, 'ddot_loss':    38.9722, 'rew_loss':     0.8804, 'lr':     0.0010, 'eps_e':     0.9980, 'lr_e':     0.0010})
Step:    5000, Reward:    14.750 [   4.918], Avg:    13.708 (0.998) <0-00:00:15> ({'r_t':  1000.0000, 'eps':     0.9980, 'lr':     0.0010, 'eps_e':     0.9980, 'lr_e':     0.0010})
Step:    6000, Reward:    11.000 [   1.732], Avg:    13.321 (0.998) <0-00:00:15> ({'r_t':  1000.0000, 'eps':     0.9980, 'lr':     0.0010, 'eps_e':     0.9980, 'lr_e':     0.0010})
Step:    7000, Reward:    11.750 [   3.112], Avg:    13.125 (0.996) <0-00:00:29> ({'r_t':  1000.0000, 'eps':     0.9960, 'dyn_loss':  4896.8960, 'dot_loss':   253.2403, 'ddot_loss':    42.4576, 'rew_loss':     0.2012, 'lr':     0.0010, 'eps_e':     0.9960, 'lr_e':     0.0010})
Step:    8000, Reward:    14.500 [   5.590], Avg:    13.278 (0.996) <0-00:00:29> ({'r_t':  1000.0000, 'eps':     0.9960, 'lr':     0.0010, 'eps_e':     0.9960, 'lr_e':     0.0010})
Step:    9000, Reward:    10.250 [   1.785], Avg:    12.975 (0.996) <0-00:00:29> ({'r_t':  1000.0000, 'eps':     0.9960, 'lr':     0.0010, 'eps_e':     0.9960, 'lr_e':     0.0010})
Step:   10000, Reward:    11.500 [   2.062], Avg:    12.841 (0.996) <0-00:00:30> ({'r_t':  1000.0000, 'eps':     0.9960, 'lr':     0.0010, 'eps_e':     0.9960, 'lr_e':     0.0010})
Step:   11000, Reward:    10.250 [   0.829], Avg:    12.625 (0.994) <0-00:00:44> ({'r_t':  1000.0000, 'eps':     0.9940, 'dyn_loss':  2705.3994, 'dot_loss':   170.7059, 'ddot_loss':    33.3443, 'rew_loss':     0.1319, 'lr':     0.0010, 'eps_e':     0.9940, 'lr_e':     0.0010})
Step:   12000, Reward:    12.500 [   3.841], Avg:    12.615 (0.994) <0-00:00:44> ({'r_t':  1000.0000, 'eps':     0.9940, 'lr':     0.0010, 'eps_e':     0.9940, 'lr_e':     0.0010})
Step:   13000, Reward:    12.500 [   3.354], Avg:    12.607 (0.994) <0-00:00:44> ({'r_t':  1000.0000, 'eps':     0.9940, 'lr':     0.0010, 'eps_e':     0.9940, 'lr_e':     0.0010})
Step:   14000, Reward:    16.000 [   9.487], Avg:    12.833 (0.992) <0-00:00:58> ({'r_t':  1000.0000, 'eps':     0.9920, 'dyn_loss':  1982.5607, 'dot_loss':   135.3529, 'ddot_loss':    29.8765, 'rew_loss':     0.0938, 'lr':     0.0010, 'eps_e':     0.9920, 'lr_e':     0.0010})
Step:   15000, Reward:    16.750 [   4.437], Avg:    13.078 (0.992) <0-00:00:58> ({'r_t':  1000.0000, 'eps':     0.9920, 'lr':     0.0010, 'eps_e':     0.9920, 'lr_e':     0.0010})
Step:   16000, Reward:    14.250 [   7.980], Avg:    13.147 (0.992) <0-00:00:58> ({'r_t':  1000.0000, 'eps':     0.9920, 'lr':     0.0010, 'eps_e':     0.9920, 'lr_e':     0.0010})
Step:   17000, Reward:    13.000 [   4.950], Avg:    13.139 (0.992) <0-00:00:59> ({'r_t':  1000.0000, 'eps':     0.9920, 'lr':     0.0010, 'eps_e':     0.9920, 'lr_e':     0.0010})
Step:   18000, Reward:    12.500 [   4.031], Avg:    13.105 (0.990) <0-00:01:13> ({'r_t':  1000.0000, 'eps':     0.9900, 'dyn_loss':  1336.9700, 'dot_loss':   106.5409, 'ddot_loss':    26.6815, 'rew_loss':     0.0548, 'lr':     0.0010, 'eps_e':     0.9900, 'lr_e':     0.0010})
Step:   19000, Reward:    18.500 [  10.161], Avg:    13.375 (0.990) <0-00:01:13> ({'r_t':  1000.0000, 'eps':     0.9900, 'lr':     0.0010, 'eps_e':     0.9900, 'lr_e':     0.0010})
Step:   20000, Reward:     9.250 [   0.829], Avg:    13.179 (0.990) <0-00:01:13> ({'r_t':  1000.0000, 'eps':     0.9900, 'lr':     0.0010, 'eps_e':     0.9900, 'lr_e':     0.0010})
Step:   21000, Reward:    14.000 [   3.000], Avg:    13.216 (0.988) <0-00:01:27> ({'r_t':  1000.0000, 'eps':     0.9881, 'dyn_loss':  1003.1124, 'dot_loss':    82.6961, 'ddot_loss':    23.3148, 'rew_loss':     0.0356, 'lr':     0.0010, 'eps_e':     0.9881, 'lr_e':     0.0010})
Step:   22000, Reward:    22.000 [  10.050], Avg:    13.598 (0.988) <0-00:01:28> ({'r_t':  1000.0000, 'eps':     0.9881, 'lr':     0.0010, 'eps_e':     0.9881, 'lr_e':     0.0010})
Step:   23000, Reward:     9.250 [   1.299], Avg:    13.417 (0.988) <0-00:01:28> ({'r_t':  1000.0000, 'eps':     0.9881, 'lr':     0.0010, 'eps_e':     0.9881, 'lr_e':     0.0010})
Step:   24000, Reward:    10.250 [   1.785], Avg:    13.290 (0.986) <0-00:01:42> ({'r_t':  1000.0000, 'eps':     0.9861, 'dyn_loss':   759.2031, 'dot_loss':    65.9376, 'ddot_loss':    20.3944, 'rew_loss':     0.0265, 'lr':     0.0010, 'eps_e':     0.9861, 'lr_e':     0.0010})
Step:   25000, Reward:    13.750 [   4.323], Avg:    13.308 (0.986) <0-00:01:42> ({'r_t':  1000.0000, 'eps':     0.9861, 'lr':     0.0010, 'eps_e':     0.9861, 'lr_e':     0.0010})
Step:   26000, Reward:     9.750 [   0.433], Avg:    13.176 (0.986) <0-00:01:43> ({'r_t':  1000.0000, 'eps':     0.9861, 'lr':     0.0010, 'eps_e':     0.9861, 'lr_e':     0.0010})
Step:   27000, Reward:    13.500 [   3.841], Avg:    13.188 (0.986) <0-00:01:43> ({'r_t':  1000.0000, 'eps':     0.9861, 'lr':     0.0010, 'eps_e':     0.9861, 'lr_e':     0.0010})
Step:   28000, Reward:    13.250 [   5.068], Avg:    13.190 (0.984) <0-00:01:57> ({'r_t':  1000.0000, 'eps':     0.9841, 'dyn_loss':   557.4188, 'dot_loss':    53.6402, 'ddot_loss':    17.9596, 'rew_loss':     0.0258, 'lr':     0.0010, 'eps_e':     0.9841, 'lr_e':     0.0010})
Step:   29000, Reward:    20.750 [  10.059], Avg:    13.442 (0.984) <0-00:01:57> ({'r_t':  1000.0000, 'eps':     0.9841, 'lr':     0.0010, 'eps_e':     0.9841, 'lr_e':     0.0010})
Step:   30000, Reward:    15.000 [   4.743], Avg:    13.492 (0.984) <0-00:01:58> ({'r_t':  1000.0000, 'eps':     0.9841, 'lr':     0.0010, 'eps_e':     0.9841, 'lr_e':     0.0010})
Step:   31000, Reward:    16.250 [   8.526], Avg:    13.578 (0.982) <0-00:02:12> ({'r_t':  1000.0000, 'eps':     0.9821, 'dyn_loss':   421.4433, 'dot_loss':    43.1660, 'ddot_loss':    15.2241, 'rew_loss':     0.0217, 'lr':     0.0010, 'eps_e':     0.9821, 'lr_e':     0.0010})
Step:   32000, Reward:    12.000 [   4.062], Avg:    13.530 (0.982) <0-00:02:12> ({'r_t':  1000.0000, 'eps':     0.9821, 'lr':     0.0010, 'eps_e':     0.9821, 'lr_e':     0.0010})
Step:   33000, Reward:    14.250 [   5.540], Avg:    13.551 (0.982) <0-00:02:13> ({'r_t':  1000.0000, 'eps':     0.9821, 'lr':     0.0010, 'eps_e':     0.9821, 'lr_e':     0.0010})
Step:   34000, Reward:    15.250 [   9.679], Avg:    13.600 (0.982) <0-00:02:13> ({'r_t':  1000.0000, 'eps':     0.9821, 'lr':     0.0010, 'eps_e':     0.9821, 'lr_e':     0.0010})
Step:   35000, Reward:    13.250 [   2.861], Avg:    13.590 (0.980) <0-00:02:27> ({'r_t':  1000.0000, 'eps':     0.9802, 'dyn_loss':   308.9705, 'dot_loss':    33.7925, 'ddot_loss':    12.6379, 'rew_loss':     0.0195, 'lr':     0.0010, 'eps_e':     0.9802, 'lr_e':     0.0010})
Step:   36000, Reward:    17.250 [   6.180], Avg:    13.689 (0.980) <0-00:02:28> ({'r_t':  1000.0000, 'eps':     0.9802, 'lr':     0.0010, 'eps_e':     0.9802, 'lr_e':     0.0010})
Step:   37000, Reward:    12.500 [   2.958], Avg:    13.658 (0.980) <0-00:02:28> ({'r_t':  1000.0000, 'eps':     0.9802, 'lr':     0.0010, 'eps_e':     0.9802, 'lr_e':     0.0010})
Step:   38000, Reward:    16.000 [   5.788], Avg:    13.718 (0.978) <0-00:02:42> ({'r_t':  1000.0000, 'eps':     0.9782, 'dyn_loss':   239.5519, 'dot_loss':    26.1188, 'ddot_loss':     9.8197, 'rew_loss':     0.0191, 'lr':     0.0010, 'eps_e':     0.9782, 'lr_e':     0.0010})
Step:   39000, Reward:     9.750 [   1.090], Avg:    13.619 (0.978) <0-00:02:43> ({'r_t':  1000.0000, 'eps':     0.9782, 'lr':     0.0010, 'eps_e':     0.9782, 'lr_e':     0.0010})
Step:   40000, Reward:    14.250 [   4.815], Avg:    13.634 (0.978) <0-00:02:43> ({'r_t':  1000.0000, 'eps':     0.9782, 'lr':     0.0010, 'eps_e':     0.9782, 'lr_e':     0.0010})
Step:   41000, Reward:    11.250 [   3.897], Avg:    13.577 (0.976) <0-00:02:58> ({'r_t':  1000.0000, 'eps':     0.9763, 'dyn_loss':   181.4272, 'dot_loss':    20.3533, 'ddot_loss':     8.1379, 'rew_loss':     0.0187, 'lr':     0.0010, 'eps_e':     0.9763, 'lr_e':     0.0010})
Step:   42000, Reward:    11.000 [   1.000], Avg:    13.517 (0.976) <0-00:02:58> ({'r_t':  1000.0000, 'eps':     0.9763, 'lr':     0.0010, 'eps_e':     0.9763, 'lr_e':     0.0010})
Step:   43000, Reward:    16.750 [  10.686], Avg:    13.591 (0.976) <0-00:02:59> ({'r_t':  1000.0000, 'eps':     0.9763, 'lr':     0.0010, 'eps_e':     0.9763, 'lr_e':     0.0010})
Step:   44000, Reward:    15.750 [   4.023], Avg:    13.639 (0.976) <0-00:02:59> ({'r_t':  1000.0000, 'eps':     0.9763, 'lr':     0.0010, 'eps_e':     0.9763, 'lr_e':     0.0010})
Step:   45000, Reward:    21.250 [  13.084], Avg:    13.804 (0.974) <0-00:03:13> ({'r_t':  1000.0000, 'eps':     0.9743, 'dyn_loss':   138.8980, 'dot_loss':    15.5263, 'ddot_loss':     6.4129, 'rew_loss':     0.0195, 'lr':     0.0010, 'eps_e':     0.9743, 'lr_e':     0.0010})
Step:   46000, Reward:    20.750 [   8.927], Avg:    13.952 (0.974) <0-00:03:14> ({'r_t':  1000.0000, 'eps':     0.9743, 'lr':     0.0010, 'eps_e':     0.9743, 'lr_e':     0.0010})
Step:   47000, Reward:     9.500 [   0.500], Avg:    13.859 (0.974) <0-00:03:15> ({'r_t':  1000.0000, 'eps':     0.9743, 'lr':     0.0010, 'eps_e':     0.9743, 'lr_e':     0.0010})
Step:   48000, Reward:    11.250 [   2.165], Avg:    13.806 (0.972) <0-00:03:29> ({'r_t':  1000.0000, 'eps':     0.9724, 'dyn_loss':   106.8271, 'dot_loss':    12.0256, 'ddot_loss':     5.3298, 'rew_loss':     0.0158, 'lr':     0.0010, 'eps_e':     0.9724, 'lr_e':     0.0010})
Step:   49000, Reward:    12.750 [   5.403], Avg:    13.785 (0.972) <0-00:03:30> ({'r_t':  1000.0000, 'eps':     0.9724, 'lr':     0.0010, 'eps_e':     0.9724, 'lr_e':     0.0010})
Step:   50000, Reward:    12.750 [   4.763], Avg:    13.765 (0.972) <0-00:03:30> ({'r_t':  1000.0000, 'eps':     0.9724, 'lr':     0.0010, 'eps_e':     0.9724, 'lr_e':     0.0010})
Step:   51000, Reward:    22.500 [  11.864], Avg:    13.933 (0.972) <0-00:03:31> ({'r_t':  1000.0000, 'eps':     0.9724, 'lr':     0.0010, 'eps_e':     0.9724, 'lr_e':     0.0010})
Step:   52000, Reward:    11.250 [   2.165], Avg:    13.882 (0.970) <0-00:03:45> ({'r_t':  1000.0000, 'eps':     0.9704, 'dyn_loss':    83.4552, 'dot_loss':     9.4030, 'ddot_loss':     4.3222, 'rew_loss':     0.0172, 'lr':     0.0010, 'eps_e':     0.9704, 'lr_e':     0.0010})
Step:   53000, Reward:    13.500 [   5.025], Avg:    13.875 (0.970) <0-00:03:46> ({'r_t':  1000.0000, 'eps':     0.9704, 'lr':     0.0010, 'eps_e':     0.9704, 'lr_e':     0.0010})
Step:   54000, Reward:    13.500 [   6.690], Avg:    13.868 (0.970) <0-00:03:46> ({'r_t':  1000.0000, 'eps':     0.9704, 'lr':     0.0010, 'eps_e':     0.9704, 'lr_e':     0.0010})
Step:   55000, Reward:    12.750 [   2.947], Avg:    13.848 (0.968) <0-00:04:01> ({'r_t':  1000.0000, 'eps':     0.9685, 'dyn_loss':    65.6924, 'dot_loss':     7.3785, 'ddot_loss':     3.6201, 'rew_loss':     0.0189, 'lr':     0.0010, 'eps_e':     0.9685, 'lr_e':     0.0010})
Step:   56000, Reward:    12.250 [   3.419], Avg:    13.820 (0.968) <0-00:04:01> ({'r_t':  1000.0000, 'eps':     0.9685, 'lr':     0.0010, 'eps_e':     0.9685, 'lr_e':     0.0010})
Step:   57000, Reward:    11.000 [   1.225], Avg:    13.772 (0.968) <0-00:04:02> ({'r_t':  1000.0000, 'eps':     0.9685, 'lr':     0.0010, 'eps_e':     0.9685, 'lr_e':     0.0010})
Step:   58000, Reward:    11.750 [   2.046], Avg:    13.737 (0.967) <0-00:04:17> ({'r_t':  1000.0000, 'eps':     0.9665, 'dyn_loss':    57.2173, 'dot_loss':     6.2137, 'ddot_loss':     3.1135, 'rew_loss':     0.0188, 'lr':     0.0010, 'eps_e':     0.9665, 'lr_e':     0.0010})
Step:   59000, Reward:     9.500 [   1.118], Avg:    13.667 (0.967) <0-00:04:17> ({'r_t':  1000.0000, 'eps':     0.9665, 'lr':     0.0010, 'eps_e':     0.9665, 'lr_e':     0.0010})
Step:   60000, Reward:     9.750 [   0.829], Avg:    13.602 (0.967) <0-00:04:18> ({'r_t':  1000.0000, 'eps':     0.9665, 'lr':     0.0010, 'eps_e':     0.9665, 'lr_e':     0.0010})
Step:   61000, Reward:    10.750 [   2.165], Avg:    13.556 (0.967) <0-00:04:19> ({'r_t':  1000.0000, 'eps':     0.9665, 'lr':     0.0010, 'eps_e':     0.9665, 'lr_e':     0.0010})
Step:   62000, Reward:    13.250 [   3.961], Avg:    13.552 (0.965) <0-00:04:33> ({'r_t':  1000.0000, 'eps':     0.9646, 'dyn_loss':    46.7862, 'dot_loss':     4.8611, 'ddot_loss':     2.6019, 'rew_loss':     0.0176, 'lr':     0.0010, 'eps_e':     0.9646, 'lr_e':     0.0010})
Step:   63000, Reward:    11.750 [   3.112], Avg:    13.523 (0.965) <0-00:04:34> ({'r_t':  1000.0000, 'eps':     0.9646, 'lr':     0.0010, 'eps_e':     0.9646, 'lr_e':     0.0010})
Step:   64000, Reward:    24.750 [  12.872], Avg:    13.696 (0.965) <0-00:04:35> ({'r_t':  1000.0000, 'eps':     0.9646, 'lr':     0.0010, 'eps_e':     0.9646, 'lr_e':     0.0010})
Step:   65000, Reward:     9.750 [   0.829], Avg:    13.636 (0.963) <0-00:04:49> ({'r_t':  1000.0000, 'eps':     0.9627, 'dyn_loss':    40.2930, 'dot_loss':     3.7851, 'ddot_loss':     2.2727, 'rew_loss':     0.0185, 'lr':     0.0010, 'eps_e':     0.9627, 'lr_e':     0.0010})
Step:   66000, Reward:    13.250 [   6.220], Avg:    13.631 (0.963) <0-00:04:50> ({'r_t':  1000.0000, 'eps':     0.9627, 'lr':     0.0010, 'eps_e':     0.9627, 'lr_e':     0.0010})
Step:   67000, Reward:    13.750 [   6.016], Avg:    13.632 (0.963) <0-00:04:51> ({'r_t':  1000.0000, 'eps':     0.9627, 'lr':     0.0010, 'eps_e':     0.9627, 'lr_e':     0.0010})
Step:   68000, Reward:    17.500 [   3.202], Avg:    13.688 (0.963) <0-00:04:51> ({'r_t':  1000.0000, 'eps':     0.9627, 'lr':     0.0010, 'eps_e':     0.9627, 'lr_e':     0.0010})
Step:   69000, Reward:    17.000 [   7.382], Avg:    13.736 (0.961) <0-00:05:06> ({'r_t':  1000.0000, 'eps':     0.9608, 'dyn_loss':    35.4520, 'dot_loss':     3.0811, 'ddot_loss':     1.9296, 'rew_loss':     0.0184, 'lr':     0.0010, 'eps_e':     0.9608, 'lr_e':     0.0010})
Step:   70000, Reward:    14.750 [   7.224], Avg:    13.750 (0.961) <0-00:05:07> ({'r_t':  1000.0000, 'eps':     0.9608, 'lr':     0.0010, 'eps_e':     0.9608, 'lr_e':     0.0010})
Step:   71000, Reward:    14.000 [   7.517], Avg:    13.753 (0.961) <0-00:05:08> ({'r_t':  1000.0000, 'eps':     0.9608, 'lr':     0.0010, 'eps_e':     0.9608, 'lr_e':     0.0010})
Step:   72000, Reward:    20.750 [   6.534], Avg:    13.849 (0.959) <0-00:05:22> ({'r_t':  1000.0000, 'eps':     0.9588, 'dyn_loss':    31.4987, 'dot_loss':     2.4517, 'ddot_loss':     1.6899, 'rew_loss':     0.0179, 'lr':     0.0010, 'eps_e':     0.9588, 'lr_e':     0.0010})
Step:   73000, Reward:    16.000 [   4.301], Avg:    13.878 (0.959) <0-00:05:23> ({'r_t':  1000.0000, 'eps':     0.9588, 'lr':     0.0010, 'eps_e':     0.9588, 'lr_e':     0.0010})
Step:   74000, Reward:    13.000 [   2.550], Avg:    13.867 (0.959) <0-00:05:24> ({'r_t':  1000.0000, 'eps':     0.9588, 'lr':     0.0010, 'eps_e':     0.9588, 'lr_e':     0.0010})
Step:   75000, Reward:    20.750 [  14.359], Avg:    13.957 (0.959) <0-00:05:25> ({'r_t':  1000.0000, 'eps':     0.9588, 'lr':     0.0010, 'eps_e':     0.9588, 'lr_e':     0.0010})
Step:   76000, Reward:    18.250 [   7.049], Avg:    14.013 (0.957) <0-00:05:39> ({'r_t':  1000.0000, 'eps':     0.9569, 'dyn_loss':    29.4890, 'dot_loss':     2.1500, 'ddot_loss':     1.5427, 'rew_loss':     0.0189, 'lr':     0.0010, 'eps_e':     0.9569, 'lr_e':     0.0010})
Step:   77000, Reward:    14.500 [   5.025], Avg:    14.019 (0.957) <0-00:05:40> ({'r_t':  1000.0000, 'eps':     0.9569, 'lr':     0.0010, 'eps_e':     0.9569, 'lr_e':     0.0010})
Step:   78000, Reward:    13.250 [   4.763], Avg:    14.009 (0.957) <0-00:05:41> ({'r_t':  1000.0000, 'eps':     0.9569, 'lr':     0.0010, 'eps_e':     0.9569, 'lr_e':     0.0010})
Step:   79000, Reward:    15.250 [   7.155], Avg:    14.025 (0.955) <0-00:05:55> ({'r_t':  1000.0000, 'eps':     0.9550, 'dyn_loss':    26.6802, 'dot_loss':     1.7689, 'ddot_loss':     1.4040, 'rew_loss':     0.0188, 'lr':     0.0010, 'eps_e':     0.9550, 'lr_e':     0.0010})
Step:   80000, Reward:    22.500 [  14.942], Avg:    14.130 (0.955) <0-00:05:56> ({'r_t':  1000.0000, 'eps':     0.9550, 'lr':     0.0010, 'eps_e':     0.9550, 'lr_e':     0.0010})
Step:   81000, Reward:    23.250 [  10.232], Avg:    14.241 (0.955) <0-00:05:57> ({'r_t':  1000.0000, 'eps':     0.9550, 'lr':     0.0010, 'eps_e':     0.9550, 'lr_e':     0.0010})
Step:   82000, Reward:    17.000 [   8.185], Avg:    14.274 (0.953) <0-00:06:12> ({'r_t':  1000.0000, 'eps':     0.9531, 'dyn_loss':    24.8456, 'dot_loss':     1.5271, 'ddot_loss':     1.2837, 'rew_loss':     0.0181, 'lr':     0.0010, 'eps_e':     0.9531, 'lr_e':     0.0010})
Step:   83000, Reward:    12.000 [   3.082], Avg:    14.247 (0.953) <0-00:06:13> ({'r_t':  1000.0000, 'eps':     0.9531, 'lr':     0.0010, 'eps_e':     0.9531, 'lr_e':     0.0010})
Step:   84000, Reward:    13.500 [   7.794], Avg:    14.238 (0.953) <0-00:06:14> ({'r_t':  1000.0000, 'eps':     0.9531, 'lr':     0.0010, 'eps_e':     0.9531, 'lr_e':     0.0010})
Step:   85000, Reward:    10.000 [   1.225], Avg:    14.189 (0.953) <0-00:06:14> ({'r_t':  1000.0000, 'eps':     0.9531, 'lr':     0.0010, 'eps_e':     0.9531, 'lr_e':     0.0010})
Step:   86000, Reward:    15.750 [   7.224], Avg:    14.207 (0.951) <0-00:06:29> ({'r_t':  1000.0000, 'eps':     0.9512, 'dyn_loss':    23.7338, 'dot_loss':     1.4234, 'ddot_loss':     1.2431, 'rew_loss':     0.0184, 'lr':     0.0010, 'eps_e':     0.9512, 'lr_e':     0.0010})
