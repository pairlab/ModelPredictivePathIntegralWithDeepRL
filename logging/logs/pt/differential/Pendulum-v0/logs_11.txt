Model: <class 'src.models.pytorch.mpc.envmodel.differential.DifferentialEnv'>, Env: Pendulum-v0, Date: 29/05/2020 17:43:00
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-53-generic-x86_64-with-debian-buster-sid
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/ModelPredictivePathIntegralWithDeepRL.git
Hash: b0659115fd31a8c0a350fceeb3053fb2955e7f3b
Branch: master

config: 
   TRIAL_AT = 1000
   SAVE_AT = 1
   SEED = 0
   REG_LAMBDA = 1e-06
   LEARN_RATE = 0.0001
   DISCOUNT_RATE = 0.99
   ADVANTAGE_DECAY = 0.95
   INPUT_LAYER = 512
   ACTOR_HIDDEN = 256
   CRITIC_HIDDEN = 1024
   EPS_MAX = 1.0
   EPS_MIN = 0.1
   EPS_DECAY = 0.998
   NUM_STEPS = 500
   MAX_BUFFER_SIZE = 100000
   REPLAY_BATCH_SIZE = 32
   TARGET_UPDATE_RATE = 0.0004
   dynamics_size = 3
   state_size = (3,)
   action_size = (1,)
   env_name = Pendulum-v0
   envmodel = dfrntl
   model = None
   nworkers = 0
   epochs = 50
   seq_len = 40
   batch_size = 256
   train_prop = 0.9
   DYN = 
      FACTOR = 0.5
      PATIENCE = 5
      LEARN_RATE = 0.001
      TRANSITION_HIDDEN = 256
      REWARD_HIDDEN = 256
      BETA_DYN = 0.001
      BETA_DOT = 0.01
      BETA_DDOT = 1,
num_envs: 0,
envs: <__main__.Trainer object at 0x7f8299f79450>,
agent: DifferentialEnv(
	  (reward): RewardModel(
	    (linear1): Linear(in_features=7, out_features=256, bias=True)
	    (linear2): Linear(in_features=256, out_features=256, bias=True)
	    (linear3): Linear(in_features=256, out_features=1, bias=True)
	  )
	  (dynamics): TransitionModel(
	    (gru): GRUCell(7, 256)
	    (linear1): Linear(in_features=256, out_features=256, bias=True)
	    (linear2): Linear(in_features=256, out_features=256, bias=True)
	    (linear3): Linear(in_features=256, out_features=3, bias=True)
	  )
	) 
	training = True
	tau = 0.0004
	name = dfrntl
	stats = <src.utils.logger.Stats object at 0x7f828fae9390> 
		mean_dict = {}
		sum_dict = {}
	config = <src.utils.config.Config object at 0x7f829d0e4590> 
		TRIAL_AT = 1000
		SAVE_AT = 1
		SEED = 0
		REG_LAMBDA = 1e-06
		LEARN_RATE = 0.0001
		DISCOUNT_RATE = 0.99
		ADVANTAGE_DECAY = 0.95
		INPUT_LAYER = 512
		ACTOR_HIDDEN = 256
		CRITIC_HIDDEN = 1024
		EPS_MAX = 1.0
		EPS_MIN = 0.1
		EPS_DECAY = 0.998
		NUM_STEPS = 500
		MAX_BUFFER_SIZE = 100000
		REPLAY_BATCH_SIZE = 32
		TARGET_UPDATE_RATE = 0.0004
		dynamics_size = 3
		state_size = (3,)
		action_size = (1,)
		env_name = Pendulum-v0
		envmodel = dfrntl
		model = None
		nworkers = 0
		epochs = 50
		seq_len = 40
		batch_size = 256
		train_prop = 0.9
		DYN = <src.utils.config.Config object at 0x7f829d0dca90> 
			FACTOR = 0.5
			PATIENCE = 5
			LEARN_RATE = 0.001
			TRANSITION_HIDDEN = 256
			REWARD_HIDDEN = 256
			BETA_DYN = 0.001
			BETA_DOT = 0.01
			BETA_DDOT = 1
	device = cuda
	state_size = (3,)
	action_size = (1,)
	discrete = False
	dyn_index = 3
	optimizer = Adam (
	Parameter Group 0
	    amsgrad: False
	    betas: (0.9, 0.999)
	    eps: 1e-08
	    lr: 0.001
	    weight_decay: 0
	)
	scheduler = <torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f828faeb490>,

import os
import torch
import numpy as np
from src.utils.misc import load_module
from ...agents.base import PTNetwork, one_hot

class TransitionModel(torch.nn.Module):
	def __init__(self, state_size, action_size, config):
		super().__init__()
		self.gru = torch.nn.GRUCell(action_size[-1] + 2*state_size[-1], config.DYN.TRANSITION_HIDDEN)
		self.linear1 = torch.nn.Linear(config.DYN.TRANSITION_HIDDEN, config.DYN.TRANSITION_HIDDEN)
		self.linear2 = torch.nn.Linear(config.DYN.TRANSITION_HIDDEN, config.DYN.TRANSITION_HIDDEN)
		self.linear3 = torch.nn.Linear(config.DYN.TRANSITION_HIDDEN, state_size[-1])
		self.config = config

	def forward(self, action, state, state_dot):
		inputs = torch.cat([action, state, state_dot],-1)
		self.hidden = self.gru(inputs, self.hidden)
		linear1 = self.linear1(self.hidden).tanh() + self.hidden
		linear2 = self.linear2(linear1).tanh() + linear1
		state_ddot = self.linear3(linear2)
		state_dot += state_ddot
		next_state = state + state_dot
		return next_state, state_dot, state_ddot

	def reset(self, device, batch_size=None):
		if batch_size is None: batch_size = self.hidden[0].shape[1] if hasattr(self, "hidden") else 1
		self.hidden = torch.zeros(batch_size, self.config.DYN.TRANSITION_HIDDEN, device=device)

class RewardModel(torch.nn.Module):
	def __init__(self, state_size, action_size, config):
		super().__init__()
		self.linear1 = torch.nn.Linear(action_size[-1] + 2*state_size[-1], config.DYN.REWARD_HIDDEN)
		self.linear2 = torch.nn.Linear(config.DYN.REWARD_HIDDEN, config.DYN.REWARD_HIDDEN)
		self.linear3 = torch.nn.Linear(config.DYN.REWARD_HIDDEN, 1)
		self.cost = load_module(config.REWARD_MODEL)() if config.get("REWARD_MODEL") else None
		self.dyn_spec = load_module(config.DYNAMICS_SPEC) if config.get("DYNAMICS_SPEC") else None

	def forward(self, action, state, next_state):
		if self.cost and self.dyn_spec:
			next_state, state = [x.cpu().numpy() for x in [next_state, state]]
			ns_spec, s_spec = map(self.dyn_spec.observation_spec, [next_state, state])
			reward = -torch.FloatTensor(self.cost.get_cost(ns_spec, s_spec, mpc=True)).unsqueeze(-1)
		else:
			inputs = torch.cat([action, state, next_state],-1)
			layer1 = self.linear1(inputs).tanh()
			layer2 = self.linear2(layer1).tanh() + layer1
			reward = self.linear3(layer2)
		return reward

class DifferentialEnv(PTNetwork):
	def __init__(self, state_size, action_size, config, load="", gpu=True, name="dfrntl"):
		super().__init__(config, gpu, name)
		self.state_size = state_size
		self.action_size = action_size
		self.discrete = type(self.action_size) != tuple
		self.dyn_index = config.get("dynamics_size", state_size[-1])
		self.reward = RewardModel([self.dyn_index], action_size, config)
		self.dynamics = TransitionModel([self.dyn_index], action_size, config)
		self.optimizer = torch.optim.Adam(self.parameters(), lr=config.DYN.LEARN_RATE)
		self.scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(self.optimizer, factor=config.DYN.FACTOR, patience=config.DYN.PATIENCE)
		self.to(self.device)
		if load: self.load_model(load)

	def step(self, action, state=None, numpy=False, grad=False):
		action, state = map(self.to_tensor, [action, state])
		state = (self.state if state is None else state)[:,:self.dyn_index]
		with torch.enable_grad() if grad else torch.no_grad():
			state, action = map(self.to_tensor, [state, action])
			if self.discrete: action = one_hot(action)
			if self.state is None: self.state = state
			state_dot = self.state_dot
			self.state, self.state_dot, self.state_ddot = self.dynamics(action, state, state_dot)
			reward = self.reward(action, state, self.state).squeeze(-1)
		return [x.cpu().numpy() if numpy else x for x in [self.state, reward]]

	def reset(self, batch_size=None, state=None, **kwargs):
		self.dynamics.reset(self.device, batch_size)
		self.state = self.to_tensor(state)[:,:self.dyn_index] if state is not None else None
		self.state_dot = torch.zeros_like(self.state) if state is not None else None

	def rollout(self, actions, state, grad=False):
		self.reset(batch_size=len(state), state=state)
		actions = self.to_tensor(actions).transpose(0,1)
		next_states = []
		states_dot = []
		states_ddot = []
		rewards = []
		for action in actions:
			next_state, reward = self.step(action, grad=grad)
			next_states.append(next_state)
			states_dot.append(self.state_dot)
			states_ddot.append(self.state_ddot)
			rewards.append(reward)
		next_states, states_dot, states_ddot, rewards = map(lambda x: torch.stack(x,1), [next_states, states_dot, states_ddot, rewards])
		return (next_states, states_dot, states_ddot), rewards

	def get_loss(self, states, actions, next_states, rewards, dones):
		s, a, ns, r = map(self.to_tensor, (states, actions, next_states, rewards))
		s, ns = [x[:,:,:self.dyn_index] for x in [s, ns]]
		s_dot = (ns-s)
		ns_dot = torch.cat([torch.zeros_like(s_dot[:,0:1,:]), s_dot[:,:-1,:]], -2)
		s_ddot = ns_dot - s_dot
		(next_states, states_dot, states_ddot), rewards = self.rollout(a, s[:,0], grad=True)
		dyn_loss = (next_states - ns).pow(2).sum(-1).mean()
		dot_loss = (states_dot - s_dot).pow(2).sum(-1).mean()
		ddot_loss = (states_ddot - s_ddot).pow(2).sum(-1).mean()
		rew_loss = (rewards - r).pow(2).mean()
		self.stats.mean(dyn_loss=dyn_loss, dot_loss=dot_loss, ddot_loss=ddot_loss, rew_loss=rew_loss)
		return self.config.DYN.BETA_DYN*dyn_loss + self.config.DYN.BETA_DOT*dot_loss + self.config.DYN.BETA_DDOT*ddot_loss + rew_loss

	def optimize(self, states, actions, next_states, rewards, dones):
		loss = self.get_loss(states, actions, next_states, rewards, dones)
		self.optimizer.zero_grad()
		loss.backward()
		self.optimizer.step()
		return loss

	def schedule(self, test_loss):
		self.scheduler.step(test_loss)

	def get_stats(self):
		return {**super().get_stats(), "lr": self.optimizer.param_groups[0]["lr"] if self.optimizer else None}

	def save_model(self, dirname="pytorch", name="checkpoint", net=None):
		filepath, _ = self.get_checkpoint_path(dirname, name, net)
		os.makedirs(os.path.dirname(filepath), exist_ok=True)
		torch.save(self.state_dict(), filepath)
		
	def load_model(self, dirname="pytorch", name="checkpoint", net=None):
		filepath, _ = self.get_checkpoint_path(dirname, name, net)
		if os.path.exists(filepath):
			self.load_state_dict(torch.load(filepath, map_location=self.device))
			print(f"Loaded DFRNTL model at {filepath}")
		return self

Step:       0, Reward:     5.113 [  11.095], Avg:     5.113 (1.000) <0-00:00:00> ({'dyn_loss':    88.7056, 'dot_loss':     1.2741, 'ddot_loss':     0.1425, 'rew_loss':    10.2526, 'lr':     0.0010})
Step:       1, Reward:     1.481 [   2.333], Avg:     3.297 (1.000) <0-00:01:24> ({'dyn_loss':    29.8644, 'dot_loss':     0.6119, 'ddot_loss':     0.1163, 'rew_loss':     2.0956, 'lr':     0.0010})
Step:       2, Reward:     1.147 [   1.297], Avg:     2.580 (1.000) <0-00:02:50> ({'dyn_loss':    23.0901, 'dot_loss':     0.5665, 'ddot_loss':     0.1029, 'rew_loss':     1.1503, 'lr':     0.0010})
Step:       3, Reward:     1.115 [   1.100], Avg:     2.214 (1.000) <0-00:04:14> ({'dyn_loss':    20.1960, 'dot_loss':     0.5255, 'ddot_loss':     0.0915, 'rew_loss':     0.9849, 'lr':     0.0010})
Step:       4, Reward:     0.971 [   1.001], Avg:     1.965 (1.000) <0-00:05:39> ({'dyn_loss':    18.2776, 'dot_loss':     0.4967, 'ddot_loss':     0.0831, 'rew_loss':     0.8915, 'lr':     0.0010})
Step:       5, Reward:     1.022 [   0.945], Avg:     1.808 (1.000) <0-00:07:02> ({'dyn_loss':    16.9894, 'dot_loss':     0.4769, 'ddot_loss':     0.0769, 'rew_loss':     0.8544, 'lr':     0.0010})
Step:       6, Reward:     1.042 [   0.897], Avg:     1.699 (1.000) <0-00:08:27> ({'dyn_loss':    15.9568, 'dot_loss':     0.4604, 'ddot_loss':     0.0722, 'rew_loss':     0.8184, 'lr':     0.0010})
Step:       7, Reward:     1.044 [   0.849], Avg:     1.617 (1.000) <0-00:09:51> ({'dyn_loss':    15.1515, 'dot_loss':     0.4469, 'ddot_loss':     0.0680, 'rew_loss':     0.7811, 'lr':     0.0010})
Step:       8, Reward:     0.746 [   0.815], Avg:     1.520 (1.000) <0-00:11:16> ({'dyn_loss':    14.5429, 'dot_loss':     0.4387, 'ddot_loss':     0.0648, 'rew_loss':     0.7244, 'lr':     0.0010})
Step:       9, Reward:     0.866 [   0.811], Avg:     1.455 (1.000) <0-00:12:40> ({'dyn_loss':    14.2055, 'dot_loss':     0.4314, 'ddot_loss':     0.0622, 'rew_loss':     0.7361, 'lr':     0.0010})
Step:      10, Reward:     0.883 [   0.775], Avg:     1.403 (1.000) <0-00:14:05> ({'dyn_loss':    13.6963, 'dot_loss':     0.4249, 'ddot_loss':     0.0598, 'rew_loss':     0.7083, 'lr':     0.0010})
Step:      11, Reward:     0.779 [   0.763], Avg:     1.351 (1.000) <0-00:15:30> ({'dyn_loss':    13.5472, 'dot_loss':     0.4204, 'ddot_loss':     0.0578, 'rew_loss':     0.6891, 'lr':     0.0010})
Step:      12, Reward:     0.876 [   0.731], Avg:     1.314 (1.000) <0-00:16:56> ({'dyn_loss':    13.2276, 'dot_loss':     0.4154, 'ddot_loss':     0.0555, 'rew_loss':     0.6725, 'lr':     0.0010})
Step:      13, Reward:     0.822 [   0.731], Avg:     1.279 (1.000) <0-00:18:21> ({'dyn_loss':    13.0587, 'dot_loss':     0.4121, 'ddot_loss':     0.0540, 'rew_loss':     0.6686, 'lr':     0.0010})
Step:      14, Reward:     0.928 [   0.714], Avg:     1.256 (1.000) <0-00:19:47> ({'dyn_loss':    12.8894, 'dot_loss':     0.4100, 'ddot_loss':     0.0526, 'rew_loss':     0.6659, 'lr':     0.0005})
Step:      15, Reward:     0.661 [   0.608], Avg:     1.218 (1.000) <0-00:21:12> ({'dyn_loss':    12.5922, 'dot_loss':     0.4065, 'ddot_loss':     0.0498, 'rew_loss':     0.5470, 'lr':     0.0005})
Step:      16, Reward:     0.705 [   0.609], Avg:     1.188 (1.000) <0-00:22:37> ({'dyn_loss':    12.3798, 'dot_loss':     0.4041, 'ddot_loss':     0.0481, 'rew_loss':     0.5544, 'lr':     0.0005})
Step:      17, Reward:     0.751 [   0.607], Avg:     1.164 (1.000) <0-00:24:03> ({'dyn_loss':    12.2943, 'dot_loss':     0.4015, 'ddot_loss':     0.0471, 'rew_loss':     0.5576, 'lr':     0.0005})
Step:      18, Reward:     0.657 [   0.604], Avg:     1.137 (1.000) <0-00:25:27> ({'dyn_loss':    12.2000, 'dot_loss':     0.4010, 'ddot_loss':     0.0461, 'rew_loss':     0.5468, 'lr':     0.0005})
Step:      19, Reward:     0.679 [   0.603], Avg:     1.114 (1.000) <0-00:26:52> ({'dyn_loss':    12.1416, 'dot_loss':     0.4002, 'ddot_loss':     0.0454, 'rew_loss':     0.5488, 'lr':     0.0005})
Step:      20, Reward:     0.637 [   0.597], Avg:     1.092 (1.000) <0-00:28:17> ({'dyn_loss':    12.1174, 'dot_loss':     0.3989, 'ddot_loss':     0.0446, 'rew_loss':     0.5405, 'lr':     0.0005})
Step:      21, Reward:     0.658 [   0.594], Avg:     1.072 (1.000) <0-00:29:42> ({'dyn_loss':    12.0512, 'dot_loss':     0.3981, 'ddot_loss':     0.0441, 'rew_loss':     0.5402, 'lr':     0.0005})
Step:      22, Reward:     0.670 [   0.593], Avg:     1.054 (1.000) <0-00:31:05> ({'dyn_loss':    11.9762, 'dot_loss':     0.3972, 'ddot_loss':     0.0436, 'rew_loss':     0.5414, 'lr':     0.0005})
Step:      23, Reward:     0.691 [   0.590], Avg:     1.039 (1.000) <0-00:32:29> ({'dyn_loss':    11.9192, 'dot_loss':     0.3969, 'ddot_loss':     0.0431, 'rew_loss':     0.5409, 'lr':     0.0005})
Step:      24, Reward:     0.733 [   0.584], Avg:     1.027 (1.000) <0-00:33:54> ({'dyn_loss':    11.8568, 'dot_loss':     0.3968, 'ddot_loss':     0.0425, 'rew_loss':     0.5403, 'lr':     0.0005})
Step:      25, Reward:     0.628 [   0.582], Avg:     1.012 (1.000) <0-00:35:18> ({'dyn_loss':    11.7950, 'dot_loss':     0.3963, 'ddot_loss':     0.0422, 'rew_loss':     0.5283, 'lr':     0.0005})
Step:      26, Reward:     0.646 [   0.580], Avg:     0.998 (1.000) <0-00:36:42> ({'dyn_loss':    11.7463, 'dot_loss':     0.3956, 'ddot_loss':     0.0417, 'rew_loss':     0.5289, 'lr':     0.0005})
Step:      27, Reward:     0.631 [   0.575], Avg:     0.985 (1.000) <0-00:38:06> ({'dyn_loss':    11.6962, 'dot_loss':     0.3951, 'ddot_loss':     0.0412, 'rew_loss':     0.5238, 'lr':     0.0005})
Step:      28, Reward:     0.670 [   0.570], Avg:     0.974 (1.000) <0-00:39:31> ({'dyn_loss':    11.6300, 'dot_loss':     0.3948, 'ddot_loss':     0.0408, 'rew_loss':     0.5240, 'lr':     0.0005})
Step:      29, Reward:     0.691 [   0.575], Avg:     0.965 (1.000) <0-00:40:54> ({'dyn_loss':    11.5938, 'dot_loss':     0.3947, 'ddot_loss':     0.0406, 'rew_loss':     0.5302, 'lr':     0.0005})
Step:      30, Reward:     0.654 [   0.565], Avg:     0.955 (1.000) <0-00:42:18> ({'dyn_loss':    11.5390, 'dot_loss':     0.3953, 'ddot_loss':     0.0402, 'rew_loss':     0.5179, 'lr':     0.0005})
Step:      31, Reward:     0.650 [   0.565], Avg:     0.945 (1.000) <0-00:43:42> ({'dyn_loss':    11.4873, 'dot_loss':     0.3951, 'ddot_loss':     0.0399, 'rew_loss':     0.5184, 'lr':     0.0003})
