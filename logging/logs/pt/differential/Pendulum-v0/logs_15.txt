Model: <class 'src.models.pytorch.mpc.envmodel.differential.DifferentialEnv'>, Env: Pendulum-v0, Date: 04/06/2020 13:00:17
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-53-generic-x86_64-with-debian-buster-sid
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/ModelPredictivePathIntegralWithDeepRL.git
Hash: 6b45e60fd9407cf6551acce4378c896d71efc5c8
Branch: master

config: 
   TRIAL_AT = 1000
   SAVE_AT = 1
   SEED = 0
   REG_LAMBDA = 1e-06
   LEARN_RATE = 0.0001
   DISCOUNT_RATE = 0.99
   ADVANTAGE_DECAY = 0.95
   INPUT_LAYER = 512
   ACTOR_HIDDEN = 256
   CRITIC_HIDDEN = 1024
   EPS_MAX = 1.0
   EPS_MIN = 0.1
   EPS_DECAY = 0.998
   NUM_STEPS = 500
   MAX_BUFFER_SIZE = 1000000
   REPLAY_BATCH_SIZE = 32
   TARGET_UPDATE_RATE = 0.0004
   dynamics_size = 3
   state_size = (3,)
   action_size = (1,)
   env_name = Pendulum-v0
   envmodel = dfrntl
   model = None
   nworkers = 0
   epochs = 50
   seq_len = 40
   batch_size = 256
   train_prop = 0.9
   DYN = 
      REG_LAMBDA = 1e-06
      FACTOR = 0.5
      PATIENCE = 5
      LEARN_RATE = 0.001
      TRANSITION_HIDDEN = 512
      REWARD_HIDDEN = 256
      BETA_DYN = 1
      BETA_DOT = 0
      BETA_DDOT = 0,
num_envs: 0,
envs: <__main__.Trainer object at 0x7f9c810c7350>,
agent: DifferentialEnv(
	  (reward): RewardModel(
	    (linear1): Linear(in_features=7, out_features=256, bias=True)
	    (linear2): Linear(in_features=256, out_features=256, bias=True)
	    (linear3): Linear(in_features=256, out_features=256, bias=True)
	    (linear4): Linear(in_features=256, out_features=1, bias=True)
	  )
	  (dynamics): TransitionModel(
	    (gru): GRUCell(7, 512)
	    (linear1): Linear(in_features=512, out_features=512, bias=True)
	    (linear2): Linear(in_features=512, out_features=512, bias=True)
	    (state_ddot): Linear(in_features=512, out_features=3, bias=True)
	  )
	) 
	training = True
	tau = 0.0004
	name = dfrntl
	stats = <src.utils.logger.Stats object at 0x7f9c7c14ce50> 
		mean_dict = {}
		sum_dict = {}
	config = <src.utils.config.Config object at 0x7f9c858e44d0> 
		TRIAL_AT = 1000
		SAVE_AT = 1
		SEED = 0
		REG_LAMBDA = 1e-06
		LEARN_RATE = 0.0001
		DISCOUNT_RATE = 0.99
		ADVANTAGE_DECAY = 0.95
		INPUT_LAYER = 512
		ACTOR_HIDDEN = 256
		CRITIC_HIDDEN = 1024
		EPS_MAX = 1.0
		EPS_MIN = 0.1
		EPS_DECAY = 0.998
		NUM_STEPS = 500
		MAX_BUFFER_SIZE = 1000000
		REPLAY_BATCH_SIZE = 32
		TARGET_UPDATE_RATE = 0.0004
		dynamics_size = 3
		state_size = (3,)
		action_size = (1,)
		env_name = Pendulum-v0
		envmodel = dfrntl
		model = None
		nworkers = 0
		epochs = 50
		seq_len = 40
		batch_size = 256
		train_prop = 0.9
		DYN = <src.utils.config.Config object at 0x7f9c858d2c50> 
			REG_LAMBDA = 1e-06
			FACTOR = 0.5
			PATIENCE = 5
			LEARN_RATE = 0.001
			TRANSITION_HIDDEN = 512
			REWARD_HIDDEN = 256
			BETA_DYN = 1
			BETA_DOT = 0
			BETA_DDOT = 0
	device = cuda
	state_size = (3,)
	action_size = (1,)
	discrete = False
	dyn_index = 3
	optimizer = Adam (
	Parameter Group 0
	    amsgrad: False
	    betas: (0.9, 0.999)
	    eps: 1e-08
	    lr: 0.001
	    weight_decay: 1e-06
	)
	scheduler = <torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f9c07ef9850>,

import os
import torch
import numpy as np
from src.utils.misc import load_module
from ...agents.base import PTNetwork, one_hot

class TransitionModel(torch.nn.Module):
	def __init__(self, state_size, action_size, config):
		super().__init__()
		self.config = config
		self.gru = torch.nn.GRUCell(action_size[-1] + 2*state_size[-1], config.DYN.TRANSITION_HIDDEN)
		self.linear1 = torch.nn.Linear(config.DYN.TRANSITION_HIDDEN, config.DYN.TRANSITION_HIDDEN)
		self.linear2 = torch.nn.Linear(config.DYN.TRANSITION_HIDDEN, config.DYN.TRANSITION_HIDDEN)
		self.state_ddot = torch.nn.Linear(config.DYN.TRANSITION_HIDDEN, state_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, action, state, state_dot):
		input_dim = action.shape[:-1]
		action, state, state_dot, hidden = map(lambda x: x.view(np.prod(input_dim),-1), [action, state, state_dot, self.hidden])
		inputs = torch.cat([action, state, state_dot],-1)
		hidden = self.gru(inputs, hidden)
		linear1 = self.linear1(hidden).relu() + hidden
		linear2 = self.linear2(linear1).relu() + linear1
		state_ddot = self.state_ddot(linear2)
		state_dot = state_dot + state_ddot
		next_state = state + state_dot
		next_state, state_dot, state_ddot, self.hidden = map(lambda x: x.view(*input_dim,-1), [next_state, state_dot, state_ddot, hidden])
		return next_state, state_dot, state_ddot

	def reset(self, device, batch_size=None):
		if batch_size is None: batch_size = self.hidden[0].shape[1:2] if hasattr(self, "hidden") else [1]
		self.hidden = torch.zeros(*batch_size, self.config.DYN.TRANSITION_HIDDEN, device=device)

class RewardModel(torch.nn.Module):
	def __init__(self, state_size, action_size, config):
		super().__init__()
		self.cost = load_module(config.REWARD_MODEL)() if config.get("REWARD_MODEL") else None
		self.dyn_spec = load_module(config.DYNAMICS_SPEC) if config.get("DYNAMICS_SPEC") else None
		self.linear1 = torch.nn.Linear(action_size[-1] + 2*state_size[-1], config.DYN.REWARD_HIDDEN)
		self.linear2 = torch.nn.Linear(config.DYN.REWARD_HIDDEN, config.DYN.REWARD_HIDDEN)
		self.linear3 = torch.nn.Linear(config.DYN.REWARD_HIDDEN, config.DYN.REWARD_HIDDEN)
		self.linear4 = torch.nn.Linear(config.DYN.REWARD_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, action, state, next_state, grad=False):
		if self.cost and self.dyn_spec:
			if grad: return torch.zeros(action.shape[:-1]).unsqueeze(-1)
			next_state, state = [x.cpu().numpy() for x in [next_state, state]]
			ns_spec, s_spec = map(self.dyn_spec.observation_spec, [next_state, state])
			reward = -torch.FloatTensor(self.cost.get_cost(ns_spec, s_spec)).unsqueeze(-1)
		else:
			inputs = torch.cat([action, state, next_state],-1)
			layer1 = self.linear1(inputs).relu()
			layer2 = self.linear2(layer1).tanh() + layer1
			layer3 = self.linear3(layer2).tanh() + layer1
			reward = self.linear4(layer3)
		return reward

class DifferentialEnv(PTNetwork):
	def __init__(self, state_size, action_size, config, load="", gpu=True, name="dfrntl"):
		super().__init__(config, gpu, name)
		self.state_size = state_size
		self.action_size = action_size
		self.discrete = type(self.action_size) != tuple
		self.dyn_index = config.get("dynamics_size", state_size[-1])
		self.reward = RewardModel([self.dyn_index], action_size, config)
		self.dynamics = TransitionModel([self.dyn_index], action_size, config)
		self.optimizer = torch.optim.Adam(self.parameters(), lr=config.DYN.LEARN_RATE, weight_decay=config.DYN.REG_LAMBDA)
		self.scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(self.optimizer, factor=config.DYN.FACTOR, patience=config.DYN.PATIENCE)
		self.to(self.device)
		if load: self.load_model(load)

	def step(self, action, state=None, numpy=False, grad=False):
		action, state = map(self.to_tensor, [action, state])
		state = (self.state if state is None else state)[...,:self.dyn_index]
		with torch.enable_grad() if grad else torch.no_grad():
			if self.discrete: action = one_hot(action)
			if self.state is None: self.state = state
			state_dot = self.state_dot
			self.state, self.state_dot, self.state_ddot = self.dynamics(action, state, state_dot)
			reward = self.reward(action.detach(), state.detach(), self.state.detach(), grad=grad)
		return [x.cpu().numpy() if numpy else x for x in [self.state, reward.to(self.device)]]

	def reset(self, batch_size=None, state=None, **kwargs):
		self.dynamics.reset(self.device, batch_size)
		self.state = self.to_tensor(state)[...,:self.dyn_index] if state is not None else None
		self.state_dot = torch.zeros_like(self.state) if state is not None else None

	def rollout(self, actions, state, timedim=-2, numpy=False, grad=False):
		self.reset(batch_size=state.shape[:-len(self.state_size)], state=state)
		actions = self.to_tensor(actions)
		next_states = []
		states_dot = []
		states_ddot = []
		rewards = []
		for action in actions.split(1, dim=timedim):
			next_state, reward = self.step(action.squeeze(timedim), grad=grad)
			next_states.append(next_state)
			states_dot.append(self.state_dot)
			states_ddot.append(self.state_ddot)
			rewards.append(reward)
		next_states, states_dot, states_ddot, rewards = map(lambda x: torch.stack(x,timedim), [next_states, states_dot, states_ddot, rewards])
		if numpy: next_states, states_dot, states_ddot, rewards = map(lambda x: x.cpu().numpy(), [next_states, states_dot, states_ddot, rewards])
		return (next_states, states_dot, states_ddot), rewards.squeeze(-1)

	def get_loss(self, states, actions, next_states, rewards, dones):
		s, a, ns, r = map(self.to_tensor, (states, actions, next_states, rewards))
		s, ns = [x[...,:self.dyn_index] for x in [s, ns]]
		ns_dot = (ns-s)
		s_dot = torch.cat([ns_dot[:,0:1,:], ns_dot[:,:-1,:]], -2)
		(next_states, states_dot, states_ddot), rewards = self.rollout(a, s[...,0,:], grad=True)
		dyn_loss = (next_states - ns).pow(2).sum(-1).mean()
		dot_loss = (states_dot - ns_dot).pow(2).sum(-1).mean()
		ddot_loss = (states_ddot - (ns_dot - s_dot)).pow(2).sum(-1).mean()
		rew_loss = (rewards - r).pow(2).mean()
		self.stats.mean(dyn_loss=dyn_loss, dot_loss=dot_loss, ddot_loss=ddot_loss, rew_loss=rew_loss)
		return self.config.DYN.BETA_DYN*dyn_loss + self.config.DYN.BETA_DOT*dot_loss + self.config.DYN.BETA_DDOT*ddot_loss + rew_loss

	def optimize(self, states, actions, next_states, rewards, dones):
		loss = self.get_loss(states, actions, next_states, rewards, dones)
		self.optimizer.zero_grad()
		loss.backward()
		self.optimizer.step()
		return loss.item()

	def schedule(self, test_loss):
		self.scheduler.step(test_loss)

	def get_stats(self):
		return {**super().get_stats(), "lr": self.optimizer.param_groups[0]["lr"] if self.optimizer else None}

	def save_model(self, dirname="pytorch", name="checkpoint", net=None):
		filepath, _ = self.get_checkpoint_path(dirname, name, net)
		os.makedirs(os.path.dirname(filepath), exist_ok=True)
		torch.save(self.state_dict(), filepath)
		
	def load_model(self, dirname="pytorch", name="checkpoint", net=None):
		filepath, _ = self.get_checkpoint_path(dirname, name, net)
		if os.path.exists(filepath):
			try:
				self.load_state_dict(torch.load(filepath, map_location=self.device))
				print(f"Loaded DFRNTL model at {filepath}")
			except:
				print(f"Error loading DFRNTL model at {filepath}")
		return self

Step:       0, Reward:    33.620 [ 318.366], Avg:    33.620 (1.000) <0-00:00:00> ({'dyn_loss':   275.4051, 'dot_loss':    11.6768, 'ddot_loss':     3.2877, 'rew_loss':    14.4867, 'lr':     0.0010})
Step:       1, Reward:    28.857 [  30.368], Avg:    31.238 (1.000) <0-00:01:13> ({'dyn_loss':    17.6316, 'dot_loss':     0.8879, 'ddot_loss':     0.4920, 'rew_loss':    12.5853, 'lr':     0.0010})
Step:       2, Reward:    26.883 [  27.328], Avg:    29.786 (1.000) <0-00:02:28> ({'dyn_loss':    14.9865, 'dot_loss':     0.6238, 'ddot_loss':     0.3217, 'rew_loss':    12.2972, 'lr':     0.0010})
Step:       3, Reward:    23.841 [  25.425], Avg:    28.300 (1.000) <0-00:03:40> ({'dyn_loss':    13.2096, 'dot_loss':     0.4334, 'ddot_loss':     0.1827, 'rew_loss':    12.0569, 'lr':     0.0010})
Step:       4, Reward:    14.547 [  20.383], Avg:    25.549 (1.000) <0-00:04:56> ({'dyn_loss':     9.1741, 'dot_loss':     0.3444, 'ddot_loss':     0.1575, 'rew_loss':    10.6253, 'lr':     0.0010})
Step:       5, Reward:     8.576 [  11.682], Avg:    22.721 (1.000) <0-00:06:09> ({'dyn_loss':     4.8806, 'dot_loss':     0.2772, 'ddot_loss':     0.1744, 'rew_loss':     6.4909, 'lr':     0.0010})
Step:       6, Reward:     3.665 [   6.003], Avg:    19.998 (1.000) <0-00:07:24> ({'dyn_loss':     2.3339, 'dot_loss':     0.1766, 'ddot_loss':     0.1328, 'rew_loss':     3.4348, 'lr':     0.0010})
Step:       7, Reward:     2.943 [   4.572], Avg:    17.866 (1.000) <0-00:08:37> ({'dyn_loss':     1.6813, 'dot_loss':     0.1315, 'ddot_loss':     0.1070, 'rew_loss':     2.7278, 'lr':     0.0010})
Step:       8, Reward:     2.289 [   3.685], Avg:    16.136 (1.000) <0-00:09:52> ({'dyn_loss':     1.2880, 'dot_loss':     0.1019, 'ddot_loss':     0.0895, 'rew_loss':     2.2572, 'lr':     0.0010})
Step:       9, Reward:     3.484 [   3.093], Avg:    14.870 (1.000) <0-00:11:04> ({'dyn_loss':     1.1137, 'dot_loss':     0.0801, 'ddot_loss':     0.0729, 'rew_loss':     2.0182, 'lr':     0.0010})
Step:      10, Reward:     2.704 [   2.909], Avg:    13.764 (1.000) <0-00:12:16> ({'dyn_loss':     0.9979, 'dot_loss':     0.0683, 'ddot_loss':     0.0655, 'rew_loss':     1.8903, 'lr':     0.0010})
Step:      11, Reward:     2.163 [   2.626], Avg:    12.798 (1.000) <0-00:13:28> ({'dyn_loss':     0.8648, 'dot_loss':     0.0564, 'ddot_loss':     0.0566, 'rew_loss':     1.7148, 'lr':     0.0010})
Step:      12, Reward:     1.900 [   2.510], Avg:    11.959 (1.000) <0-00:14:39> ({'dyn_loss':     0.8190, 'dot_loss':     0.0495, 'ddot_loss':     0.0502, 'rew_loss':     1.6298, 'lr':     0.0010})
Step:      13, Reward:     2.214 [   2.409], Avg:    11.263 (1.000) <0-00:15:55> ({'dyn_loss':     0.7934, 'dot_loss':     0.0439, 'ddot_loss':     0.0459, 'rew_loss':     1.5960, 'lr':     0.0010})
Step:      14, Reward:     2.435 [   2.184], Avg:    10.675 (1.000) <0-00:17:19> ({'dyn_loss':     0.7197, 'dot_loss':     0.0387, 'ddot_loss':     0.0427, 'rew_loss':     1.4895, 'lr':     0.0010})
Step:      15, Reward:     2.529 [   2.095], Avg:    10.166 (1.000) <0-00:18:32> ({'dyn_loss':     0.6988, 'dot_loss':     0.0358, 'ddot_loss':     0.0416, 'rew_loss':     1.4399, 'lr':     0.0010})
Step:      16, Reward:     2.738 [   2.017], Avg:     9.729 (1.000) <0-00:19:45> ({'dyn_loss':     0.6783, 'dot_loss':     0.0335, 'ddot_loss':     0.0408, 'rew_loss':     1.4103, 'lr':     0.0010})
Step:      17, Reward:     2.197 [   1.837], Avg:     9.310 (1.000) <0-00:20:58> ({'dyn_loss':     0.6105, 'dot_loss':     0.0307, 'ddot_loss':     0.0420, 'rew_loss':     1.2622, 'lr':     0.0010})
Step:      18, Reward:     1.739 [   1.728], Avg:     8.912 (1.000) <0-00:22:11> ({'dyn_loss':     0.5603, 'dot_loss':     0.0282, 'ddot_loss':     0.0397, 'rew_loss':     1.1685, 'lr':     0.0010})
Step:      19, Reward:     2.002 [   1.686], Avg:     8.566 (1.000) <0-00:23:27> ({'dyn_loss':     0.5560, 'dot_loss':     0.0285, 'ddot_loss':     0.0418, 'rew_loss':     1.1614, 'lr':     0.0010})
Step:      20, Reward:     1.852 [   1.604], Avg:     8.246 (1.000) <0-00:24:39> ({'dyn_loss':     0.5292, 'dot_loss':     0.0274, 'ddot_loss':     0.0406, 'rew_loss':     1.0996, 'lr':     0.0010})
Step:      21, Reward:     1.981 [   1.526], Avg:     7.962 (1.000) <0-00:25:52> ({'dyn_loss':     0.5157, 'dot_loss':     0.0262, 'ddot_loss':     0.0393, 'rew_loss':     1.0557, 'lr':     0.0010})
Step:      22, Reward:     1.692 [   1.465], Avg:     7.689 (1.000) <0-00:27:05> ({'dyn_loss':     0.4786, 'dot_loss':     0.0248, 'ddot_loss':     0.0380, 'rew_loss':     1.0094, 'lr':     0.0010})
Step:      23, Reward:     1.411 [   1.431], Avg:     7.427 (1.000) <0-00:28:20> ({'dyn_loss':     0.4604, 'dot_loss':     0.0240, 'ddot_loss':     0.0361, 'rew_loss':     0.9682, 'lr':     0.0010})
Step:      24, Reward:     1.394 [   1.361], Avg:     7.186 (1.000) <0-00:29:33> ({'dyn_loss':     0.4370, 'dot_loss':     0.0231, 'ddot_loss':     0.0350, 'rew_loss':     0.9275, 'lr':     0.0010})
Step:      25, Reward:     1.916 [   1.325], Avg:     6.983 (1.000) <0-00:30:44> ({'dyn_loss':     0.4429, 'dot_loss':     0.0224, 'ddot_loss':     0.0324, 'rew_loss':     0.9409, 'lr':     0.0010})
Step:      26, Reward:     1.093 [   1.297], Avg:     6.765 (1.000) <0-00:31:56> ({'dyn_loss':     0.4105, 'dot_loss':     0.0213, 'ddot_loss':     0.0320, 'rew_loss':     0.8665, 'lr':     0.0010})
Step:      27, Reward:     1.518 [   1.257], Avg:     6.578 (1.000) <0-00:33:07> ({'dyn_loss':     0.4172, 'dot_loss':     0.0217, 'ddot_loss':     0.0327, 'rew_loss':     0.8662, 'lr':     0.0010})
Step:      28, Reward:     1.622 [   1.186], Avg:     6.407 (1.000) <0-00:34:18> ({'dyn_loss':     0.3905, 'dot_loss':     0.0199, 'ddot_loss':     0.0296, 'rew_loss':     0.8394, 'lr':     0.0010})
Step:      29, Reward:     1.203 [   1.213], Avg:     6.234 (1.000) <0-00:35:31> ({'dyn_loss':     0.3830, 'dot_loss':     0.0205, 'ddot_loss':     0.0313, 'rew_loss':     0.8290, 'lr':     0.0010})
Step:      30, Reward:     1.691 [   1.212], Avg:     6.087 (1.000) <0-00:36:44> ({'dyn_loss':     0.3950, 'dot_loss':     0.0223, 'ddot_loss':     0.0345, 'rew_loss':     0.8648, 'lr':     0.0010})
Step:      31, Reward:     1.415 [   1.175], Avg:     5.941 (1.000) <0-00:37:56> ({'dyn_loss':     0.3737, 'dot_loss':     0.0220, 'ddot_loss':     0.0365, 'rew_loss':     0.8250, 'lr':     0.0010})
Step:      32, Reward:     1.496 [   1.123], Avg:     5.806 (1.000) <0-00:39:08> ({'dyn_loss':     0.3613, 'dot_loss':     0.0206, 'ddot_loss':     0.0331, 'rew_loss':     0.7993, 'lr':     0.0005})
Step:      33, Reward:     1.131 [   0.874], Avg:     5.669 (1.000) <0-00:40:27> ({'dyn_loss':     0.2750, 'dot_loss':     0.0181, 'ddot_loss':     0.0325, 'rew_loss':     0.6245, 'lr':     0.0005})
Step:      34, Reward:     1.054 [   0.870], Avg:     5.537 (1.000) <0-00:41:57> ({'dyn_loss':     0.2673, 'dot_loss':     0.0184, 'ddot_loss':     0.0341, 'rew_loss':     0.6210, 'lr':     0.0005})
Step:      35, Reward:     1.077 [   0.848], Avg:     5.413 (1.000) <0-00:43:11> ({'dyn_loss':     0.2526, 'dot_loss':     0.0187, 'ddot_loss':     0.0343, 'rew_loss':     0.6185, 'lr':     0.0005})
Step:      36, Reward:     1.147 [   0.819], Avg:     5.298 (1.000) <0-00:44:24> ({'dyn_loss':     0.2440, 'dot_loss':     0.0186, 'ddot_loss':     0.0350, 'rew_loss':     0.6074, 'lr':     0.0005})
Step:      37, Reward:     1.347 [   0.815], Avg:     5.194 (1.000) <0-00:45:37> ({'dyn_loss':     0.2438, 'dot_loss':     0.0191, 'ddot_loss':     0.0354, 'rew_loss':     0.6246, 'lr':     0.0005})
Step:      38, Reward:     1.158 [   0.784], Avg:     5.090 (1.000) <0-00:46:51> ({'dyn_loss':     0.2307, 'dot_loss':     0.0192, 'ddot_loss':     0.0368, 'rew_loss':     0.5907, 'lr':     0.0005})
Step:      39, Reward:     1.038 [   0.732], Avg:     4.989 (1.000) <0-00:48:05> ({'dyn_loss':     0.2072, 'dot_loss':     0.0184, 'ddot_loss':     0.0364, 'rew_loss':     0.5549, 'lr':     0.0005})
Step:      40, Reward:     1.116 [   0.750], Avg:     4.895 (1.000) <0-00:49:18> ({'dyn_loss':     0.2134, 'dot_loss':     0.0188, 'ddot_loss':     0.0365, 'rew_loss':     0.5728, 'lr':     0.0005})
